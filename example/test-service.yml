apiVersion: v1
kind: Service
metadata:
  name: ingress
  namespace: ingress
spec:
  selector:
    name: nginx-ingress-microk8s
  type: LoadBalancer
  # loadBalancerIP is optional. MetalLB will automatically allocate an IP 
  # from its pool if not specified. You can also specify one manually.
  # loadBalancerIP: x.y.z.a
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-deployment
  labels:
    app: helloworld
spec:
  replicas: 2
  selector:
    matchLabels:
      app: helloworld
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      containers:
        - name: helloworld
          image: httpd:2.4
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: helloworld
spec:
  type: NodePort
  selector:
    app: helloworld
  ports:
    - name: http
      protocol: TCP
      port: 443
      targetPort: 80
---
apiVersion: v1
kind: Secret
metadata:
  name: helloworld-tls
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZOVENDQkIyZ0F3SUJBZ0lTQTdIdjlNNklBNFhqNXI0RDNEZ0lZckFBTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNekF5TURFeU1UVXpORGRhRncweU16QTFNREl5TVRVek5EWmFNQ014SVRBZkJnTlZCQU1NCkdDb3ViRzlqWVd3dVpHbG5hWFJoYkhCdlpYUXVhVzVtYnpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUpJck9kb1pYVnkraFBZbUZGTnJrNEVOcmVKUmJla3FZdGZ5bVI0dDNDRU9FNXFaSkg5TgpNY05uSWI3elNobllsNmhrRjB1a0RGL1ZDRmhsdVhEcmdZY0NKbiszWnZSVEVOZ1dveVNXZmNyQ1pRYlpJaW5VClpldXFqQUlkY0Z0QkJsZHJDTnRLcmtobmtqYUZMc0s2d281TTh4eFFod0l6UW1vOFAwQU56dFlaOFM1L1MySEQKTzJ3Uk1BYjZTRzl2OHpaaCt4dExtam1TT1U5b09lYlRVeVlDY1VLbGhOYVpNcmdMSStxVC93OE9naUEwbklwdwo2MDhSYllxS2ZWeWozY2oyYTVHb2kyWjM4NFF2c1lvU3RWb0wxQjhKdFBjOElCNW52U2N2Zm5RTThvamdlbUxzCjU1RGgveENNcXExUnBTTjlJZXRxTGJMUXZYRHd2enFkdE9zQ0F3RUFBYU9DQWxJd2dnSk9NQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBZEJnTlZIUTRFRmdRVTNYbnJ5S0tZQ3hmN0syV3grK3A4azBpSU5Wa3dId1lEVlIwakJCZ3dGb0FVCkZDNnpGN2RZVnN1dVVBbEE1aCt2bllzVXdzWXdWUVlJS3dZQkJRVUhBUUVFU1RCSE1DRUdDQ3NHQVFVRkJ6QUIKaGhWb2RIUndPaTh2Y2pNdWJ5NXNaVzVqY2k1dmNtY3dJZ1lJS3dZQkJRVUhNQUtHRm1oMGRIQTZMeTl5TXk1cApMbXhsYm1OeUxtOXlaeTh3SXdZRFZSMFJCQnd3R29JWUtpNXNiMk5oYkM1a2FXZHBkR0ZzY0c5bGRDNXBibVp2Ck1Fd0dBMVVkSUFSRk1FTXdDQVlHWjRFTUFRSUJNRGNHQ3lzR0FRUUJndDhUQVFFQk1DZ3dKZ1lJS3dZQkJRVUgKQWdFV0dtaDBkSEE2THk5amNITXViR1YwYzJWdVkzSjVjSFF1YjNKbk1JSUJBd1lLS3dZQkJBSFdlUUlFQWdTQgo5QVNCOFFEdkFIVUF0ejc3Sk4rY1RicDE4am5GdWxqMGJGMzhRczk2bnpYRW5oMEpnU1h0dEprQUFBR0dEeStxCndRQUFCQU1BUmpCRUFpQWVNa3pONTdpUm9EWHdFUTJuQktBZjhpUXNNZXkrUEs3TUMvdXh1b1IxU0FJZ1dObFUKRkhVMWNyNUUzUURtSlpYaDFLV0VIVEpES1NjaldDQUpram85V3hRQWRnQjZNb3hVMkxjdHRpRHFPT0JTSHVtRQpGbkF5RTRWTk85SXJ3VHBYbzFMclVnQUFBWVlQTDZyUEFBQUVBd0JITUVVQ0lIcXppcExVekxpbzR2RlZNVGdXCmwyZkNXVWNudG9PdndnUGs2VHFxSnlyWEFpRUE5OHRUNlhJelYwSTFyVHVXeFNlUGt1dHJxemcrd0Z3cmN1WUgKYklOUVVnZ3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQURUNTRMNmZXWmNmZHdLYzJ2K1lkMkJaNzA3aS8yTgpNVU1UdStNYVphaHlCd1pEYTVZQUluUkFFb3Q5ZkVmbklia1Z4VUsrSyttdXdOWjY1UjF6WStXZE5aTmlJWnJnCjlSclNZbTdwd3F6VDljZXltZGlwN1pnWDZBbzBGdHBMcHlqRXBZMi9lU01QeGxZV0t4UXJPU21MRXRDZTRpTVoKVERQTVFOdzFtZlpKUXJOOWdVaXdzVytHMFBsTTRYb1NwUEFobTJpbUpWaURKTmxiZWRXa2p5RFZ4TExWS3hsYwozZW1ld292TUxlY3ZVTEhLaExOM090OW5CYkl1eXh5cDE1S2daOGxreUlkYWdiT2JGZ0dxWnhsdXVUaW5VZzZUClZuMUdFVW1iZ0V5Z2lGTmhob1F3Q1JhblNyUW82eEEvckZhRXFjbVJXT2ZRQURwSnVkUXhSd009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRllEQ0NCRWlnQXdJQkFnSVFRQUYzSVRmVTZVSzQ3bmFxUEdRS3R6QU5CZ2txaGtpRzl3MEJBUXNGQURBLwpNU1F3SWdZRFZRUUtFeHRFYVdkcGRHRnNJRk5wWjI1aGRIVnlaU0JVY25WemRDQkRieTR4RnpBVkJnTlZCQU1UCkRrUlRWQ0JTYjI5MElFTkJJRmd6TUI0WERUSXhNREV5TURFNU1UUXdNMW9YRFRJME1Ea3pNREU0TVRRd00xb3cKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElDRHdBd2dnSUtBb0lDQVFDdDZDUno5QlEzODV1ZUsxY29ISWUrM0xmZk9KQ01ianptVjZCNDkzWEMKb3Y3MWFtNzJBRThvMjk1b2hteEVrN2F4WS8wVUVtdS9IOUxxTVpzaGZ0RXpQTHBJOWQxNTM3TzQveEx4SVpwTAp3WXFHY1dsS1ptWnNqMzQ4Y0wrdEtTSUc4K1RBNW9DdTRrdVB0NWwrbEFPZjAwZVhmSmxJSTFQb09LNVBDbStECkx0RkpWNHlBZExiYUw5QTRqWHNEY0NFYmRmSXdQUHFQcnQzYVk2dnJGay9DamhGTGZzOEw2UCsxZHk3MHNudEsKNEV3U0pReHdqUU1wb09GVEpPd1QyZTRadnhDelNvdy9pYU5oVWQ2c2h3ZVU5R054N0M3aWIxdVlnZUdKWERSNQpiSGJ2TzVCaWVlYmJwSm92SnNYUUVPRU8zdGtRamhiN3QvZW85OGZsQWdlWWp6WUlsZWZpTjVZTk5uV2UrdzV5CnNSMmJ2QVA1U1FYWWdkMEZ0Q3JXUWVtc0FYYVZDZy9ZMzlXOUVoODFMeWdYYk5LWXdhZ0paSGR1UnplNnpxeFoKWG1pZGYzTFdpY1VHUVNrK1dUN2RKdlVreVJHbldxTk1RQjlHb1ptMXB6cFJib1k3bm4xeXB4SUZlRm50UGxGNApGUXNEajQzUUx3V3lQbnRLSEV0ekJSTDh4dXJnVUJOOFE1TjBzOHAwNTQ0ZkFRalFNTlJiY1RhMEI3ckJNREJjClNMZUNPNWltZldDS29xTXBnc3k2dllNRUc2S0RBMEdoMWdYeEc4SzI4S2g4aGp0R3FFZ3FpTngybW5hL0gycWwKUFJtUDZ6anpaTjdJS3cwS0tQLzMyK0lWUXRRaTBDZGQ0WG4rR09kd2lLMU81dG1MT3NiZEoxRnUvN3hrOVRORApUd0lEQVFBQm80SUJSakNDQVVJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBUVl3ClN3WUlLd1lCQlFVSEFRRUVQekE5TURzR0NDc0dBUVVGQnpBQ2hpOW9kSFJ3T2k4dllYQndjeTVwWkdWdWRISjEKYzNRdVkyOXRMM0p2YjNSekwyUnpkSEp2YjNSallYZ3pMbkEzWXpBZkJnTlZIU01FR0RBV2dCVEVwN0drZXl4eAordHZoUzVCMS84UVZZSVdKRURCVUJnTlZIU0FFVFRCTE1BZ0dCbWVCREFFQ0FUQS9CZ3NyQmdFRUFZTGZFd0VCCkFUQXdNQzRHQ0NzR0FRVUZCd0lCRmlKb2RIUndPaTh2WTNCekxuSnZiM1F0ZURFdWJHVjBjMlZ1WTNKNWNIUXUKYjNKbk1Ed0dBMVVkSHdRMU1ETXdNYUF2b0MyR0syaDBkSEE2THk5amNtd3VhV1JsYm5SeWRYTjBMbU52YlM5RQpVMVJTVDA5VVEwRllNME5TVEM1amNtd3dIUVlEVlIwT0JCWUVGSG0wV2VaN3R1WGtBWE9BQ0lqSUdsajI2WnR1Ck1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUtjd0JzbG03L0RsTFFydDJNNTFvR3JTK280NCsveVFvREZWREMKNVd4Q3UyK2I5TFJQd2tTSUNIWE02d2ViRkdKdWVON3NKN281WFBXaW9XNVdsSEFRVTdHNzVLL1Fvc01yQWRTVwo5TVVnTlRQNTJHRTI0SEdOdExpMXFvSkZsY0R5cVNNbzU5YWh5MmNJMnFCRExLb2JreC9KM3ZXcmFWMFQ5VnVHCldDTEtUVlhrY0dkdHdsZkZSamxCejRwWWcxaHRtZjVYNkRZTzhBNGpxdjJJbDlEalhBNlVTYlcxRnpYU0xyOU8KaGU4WTRJV1M2d1k3YkNrakNXRGNSUUpNRWhnNzZmc08zdHhFK0ZpWXJ1cTlSVVdoaUYxbXl2NFE2VytDeUJGQwpEZnZwN09PR0FONmRFT000K3FSOXNkam9TWUtFQnBzcjZHdFBBUXc0ZHk3NTNlYzUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ1NLem5hR1YxY3ZvVDIKSmhSVGE1T0JEYTNpVVczcEttTFg4cGtlTGR3aERoT2FtU1IvVFRIRFp5Rys4MG9aMkplb1pCZExwQXhmMVFoWQpaYmx3NjRHSEFpWi90MmIwVXhEWUZxTWtsbjNLd21VRzJTSXAxR1hycW93Q0hYQmJRUVpYYXdqYlNxNUlaNUkyCmhTN0N1c0tPVFBNY1VJY0NNMEpxUEQ5QURjN1dHZkV1ZjB0aHd6dHNFVEFHK2todmIvTTJZZnNiUzVvNWtqbFAKYURubTAxTW1BbkZDcFlUV21USzRDeVBxay84UERvSWdOSnlLY090UEVXMktpbjFjbzkzSTltdVJxSXRtZC9PRQpMN0dLRXJWYUM5UWZDYlQzUENBZVo3MG5MMzUwRFBLSTRIcGk3T2VRNGY4UWpLcXRVYVVqZlNIcmFpMnkwTDF3CjhMODZuYlRyQWdNQkFBRUNnZ0VBTzVWSlNPR01FRkZOYS9XTDFaR0ZtRmJXS2VwZHJtMXJ5M0dGL3lwY2tGRG4KcHQ2RVpTdzNlOXJmZzdJeTQ2Uko5Z2VQQTNPRTQ4KzRUaWh4VmxsNS9HbmcvYkRxVS9CRWJvR1QwVWRUVWNLNgpZZmRER09BUEIra0dsNW9lZ2VSWXpHdkNPWG9RMzB6dzZpNlNLQ2p2UkFpVUZWZXlJVEI2QTBvNTBrZU9wL0ZmCmdCUk0vaTRtNWN0dzVZUzlHcm5lT0NsNXR0UklCeGlING54em9QalZnTjZZcFhFc3lSQURzMzRLeHJPdnVFMzgKUlB2OUNaWUVFUFdZNldIVENDdWk2MVcvNzFhcTVkWGNVdFgvNUlKYy9YNUJPWk1wTlVqTGdMTXA0cnNrMVhNRgpmTjNXVmdUNEpSeHE3a0dPUlFjSEsrTTJkUFR1aUNiR3VJenQwNVVqTVFLQmdRREdhcG03TENrRDgySFc1djhqCnBhbnovd3EyWVhQSmdpQk5ObUlEWi9zVHBKRDFuYWpOcm92S05McGJwM01DeWFhKzFWOElUYmdEcGJMUjJnUjMKRjZwcW5tZm0rellhUzRiYmYvSzJ0WmU3YS9meERWdXpWK0NmYUpmUGVqaVovVGZuUGlBRVUvK3dRV2NIcjVxVQp2cWR4M25YdlFvajY5a1Ivd3kzSVVpb0xDUUtCZ1FDOGx1RWlyT0JEMVdKVGJ1ZzJTQmVKUEFvUCtId1hldzg3CkhiQVMwTGJialZNbUpkc3FHNEJFbDZjQkZJRkNFakxWSGNZM3gwbGdRbDU4SFc3RGN5V096L21yRndCNUswTm8KTjJ6dkU2cHhvTVd5QnR0ekFtNm1vaTQ4TFhVb1NNeHk5N0l1WE1oWExBVHE0R0ZpQmJvMkFHSlEybG5namhrTQpvYmcxaTNaWlV3S0JnUUNxY0ZldUdMa0MwOFp2dSszZXlTZThtSkN6S2ZNMFhic3htRTJKYjRDVjF2OU9mU2ZMCnh1djl2bDEyN2RnMXhOS2ZpdG9mWCtONS9wUWsvNHBtWXNYWTRFbVFlS3A0Mi9mMEJXeVExbHlJZXE1NU9taFQKSG1HdGpVTWF6bnBnak12QXIvVUF3c2NZdUpXd1hJQUUxZUV3UjFBM1BvZzhTOTk3Z0VXTGxralhRUUtCZ0M4UgpwVTFIUW80TG93Zlo1WUV1eXhrSWNDWitTVkorOTFVMDJxNUhnMndXd01zRHBjakRwbWI0UnNsaE9jV296eUViCjFrNHpvaCt4VU8yL1Z0YlhWV2RvaHhMcG9jZWNRYTJ3TDdNWUFIRnR4QW5qNWorMU9yTENSYkhsVXBsa1dnclQKd1pnS3RrSHpqYUtsc0FpTUQyYk0vN3pZVXBoV1B2QkZLTG5NZmhSYkFvR0FlMDRsdjl1VjhCdnRKcXhGa0c1UAo2cVJoNkV0OHZWSWhUeGpoWW9SckhJbXFSNHg3cnVlaVVmM2dFWlBnV0E5R2tCQjRtSHdoYUVjVG9zKzYxUitRCkY1aXZuYmlRb1NmL2JhaTUvMDJhZFJMWDJRU2VQaWtYMGdvUlM0K3NCeVJ1T251N0RPUFNLdmRhU2ZiaVRqeWkKOFV3MmlVZmFkV25qdVd0V2sra2FhY1k9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: helloworld-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
    - hosts:
        - helloworld.local.digitalpoet.info
      secretName: helloworld-tls
  rules:
    - host: helloworld.local.digitalpoet.info
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: helloworld
                port:
                  number: 443
